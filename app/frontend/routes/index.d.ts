/**
 * @file Generated by js-routes 2.3.5. Based on Rails 8.0.2.1 routes of SplitMySub::Application.
 * @version cb74cfc14eeaac1ca341d536e412522c4b57fd6e5a42885050f8190a0dd79a89
 * @see https://github.com/railsware/js-routes
 */
declare type Optional<T> = {
    [P in keyof T]?: T[P] | null;
};
declare type Collection<T> = Record<string, T>;
declare type BaseRouteParameter = string | boolean | Date | number | bigint;
declare type MethodRouteParameter = BaseRouteParameter | (() => BaseRouteParameter);
declare type ModelRouteParameter = {
    id: MethodRouteParameter;
} | {
    to_param: MethodRouteParameter;
} | {
    toParam: MethodRouteParameter;
};
declare type RequiredRouteParameter = BaseRouteParameter | ModelRouteParameter;
declare type OptionalRouteParameter = undefined | null | RequiredRouteParameter;
declare type QueryRouteParameter = OptionalRouteParameter | QueryRouteParameter[] | {
    [k: string]: QueryRouteParameter;
};
declare type RouteParameters = Collection<QueryRouteParameter>;
declare type Serializable = Collection<unknown>;
declare type Serializer = (value: Serializable) => string;
declare type RouteHelperExtras = {
    requiredParams(): string[];
    toString(): string;
};
declare type RequiredParameters<T extends number> = T extends 1 ? [RequiredRouteParameter] : T extends 2 ? [RequiredRouteParameter, RequiredRouteParameter] : T extends 3 ? [RequiredRouteParameter, RequiredRouteParameter, RequiredRouteParameter] : T extends 4 ? [
    RequiredRouteParameter,
    RequiredRouteParameter,
    RequiredRouteParameter,
    RequiredRouteParameter
] : RequiredRouteParameter[];
declare type RouteHelperOptions = RouteOptions & Collection<OptionalRouteParameter>;
declare type RouteHelper<T extends number = number> = ((...args: [...RequiredParameters<T>, RouteHelperOptions]) => string) & RouteHelperExtras;
declare type RouteHelpers = Collection<RouteHelper>;
declare type Configuration = {
    prefix: string;
    default_url_options: RouteParameters;
    special_options_key: string;
    serializer: Serializer;
};
interface RouterExposedMethods {
    config(): Configuration;
    configure(arg: Partial<Configuration>): Configuration;
    serialize: Serializer;
}
declare type KeywordUrlOptions = Optional<{
    host: string;
    protocol: string;
    subdomain: string;
    port: string | number;
    anchor: string;
    trailing_slash: boolean;
    script_name: string;
    params: RouteParameters;
}>;
declare type RouteOptions = KeywordUrlOptions & RouteParameters;
declare type PartsTable = Collection<{
    r?: boolean;
    d?: OptionalRouteParameter;
}>;
declare type ModuleType = "CJS" | "AMD" | "UMD" | "ESM" | "DTS" | "NIL";
declare const RubyVariables: {
    PREFIX: string;
    DEPRECATED_FALSE_PARAMETER_BEHAVIOR: boolean;
    SPECIAL_OPTIONS_KEY: string;
    DEFAULT_URL_OPTIONS: RouteParameters;
    SERIALIZER: Serializer;
    ROUTES_OBJECT: RouteHelpers;
    MODULE_TYPE: ModuleType;
    WRAPPER: <T>(callback: T) => T;
};
declare const define: undefined | (((arg: unknown[], callback: () => unknown) => void) & {
    amd?: unknown;
});
declare const module: {
    exports: unknown;
} | undefined;
export const configure: RouterExposedMethods['configure'];

export const config: RouterExposedMethods['config'];

export const serialize: RouterExposedMethods['serialize'];

/**
 * Generates rails route to
 * /invitations/:token/accept(.:format)
 * @param {any} token
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const acceptInvitationPath: ((
  token: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/payment_confirmations/:id/add_note(.:format)
 * @param {any} projectId
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const addNoteProjectPaymentConfirmationPath: ((
  projectId: RequiredRouteParameter,
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/billing_cycles/:id/adjust(.:format)
 * @param {any} projectId
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const adjustProjectBillingCyclePath: ((
  projectId: RequiredRouteParameter,
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /admin(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const adminPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /admin/billing_configuration(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const adminBillingConfigurationPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /admin/projects(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const adminProjectsPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /admin/errors
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const adminSolidErrorsPath: ((
  options?: RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /admin/errors/:id(.:format)
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const adminSolidErrorsErrorPath: ((
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /admin/errors/
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const adminSolidErrorsErrorsPath: ((
  options?: RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /admin/errors/
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const adminSolidErrorsRootPath: ((
  options?: RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/billing_cycles/:id/archive(.:format)
 * @param {any} projectId
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const archiveProjectBillingCyclePath: ((
  projectId: RequiredRouteParameter,
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/payment_confirmations/batch_update(.:format)
 * @param {any} projectId
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const batchUpdateProjectPaymentConfirmationsPath: ((
  projectId: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /billing_cycles/:billing_cycle_id/payments(.:format)
 * @param {any} billingCycleId
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const billingCyclePaymentsPath: ((
  billingCycleId: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /invitations/:token/confirm(.:format)
 * @param {any} token
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const confirmInvitationPath: ((
  token: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /create_flash(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const createFlashPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /csp-violation-report-endpoint(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const cspViolationReportEndpointPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /dashboard(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const dashboardPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /dashboard/analytics(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const dashboardAnalyticsPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /dashboard/export_payments(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const dashboardExportPaymentsPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /dashboard/payment_history(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const dashboardPaymentHistoryPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /dashboard/upcoming_payments(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const dashboardUpcomingPaymentsPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /invitations/:token/decline(.:format)
 * @param {any} token
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const declineInvitationPath: ((
  token: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /admin/billing_configuration/edit(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editAdminBillingConfigurationPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /passwords/:token/edit(.:format)
 * @param {any} token
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editPasswordPath: ((
  token: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /profile/edit(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editProfilePath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:id/edit(.:format)
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editProjectPath: ((
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/billing_cycles/:id/edit(.:format)
 * @param {any} projectId
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const editProjectBillingCyclePath: ((
  projectId: RequiredRouteParameter,
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/billing_cycles/generate_upcoming(.:format)
 * @param {any} projectId
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const generateUpcomingProjectBillingCyclesPath: ((
  projectId: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /invitations/:token(.:format)
 * @param {any} token
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const invitationPath: ((
  token: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /letter_opener
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const letterOpenerWebPath: ((
  options?: RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /letter_opener/clear(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const letterOpenerWebClearLettersPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /letter_opener/:id/delete(.:format)
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const letterOpenerWebDeleteLetterPath: ((
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /letter_opener/:id(/:style)(.:format)
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const letterOpenerWebLetterPath: ((
  id: RequiredRouteParameter,
  options?: {style?: OptionalRouteParameter, format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /letter_opener/
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const letterOpenerWebLettersPath: ((
  options?: RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /login(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const loginPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /logout(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const logoutPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /magic_link(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const magicLinkPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /billing_cycles/:billing_cycle_id/payments/new(.:format)
 * @param {any} billingCycleId
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newBillingCyclePaymentPath: ((
  billingCycleId: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /passwords/new(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newPasswordPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/new(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newProjectPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/billing_cycles/new(.:format)
 * @param {any} projectId
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newProjectBillingCyclePath: ((
  projectId: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/conductor/action_mailbox/inbound_emails/new(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newRailsConductorInboundEmailPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/conductor/action_mailbox/inbound_emails/sources/new(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const newRailsConductorInboundEmailSourcePath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /passwords/:token(.:format)
 * @param {any} token
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const passwordPath: ((
  token: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /passwords(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const passwordsPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /payments/:id(.:format)
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const paymentPath: ((
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /payments(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const paymentsPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:id/preview_reminder(.:format)
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const previewReminderProjectPath: ((
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /unsubscribe/:token(.:format)
 * @param {any} token
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const processUnsubscribePath: ((
  token: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /profile(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const profilePath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /profile/telegram/check_status(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const profileTelegramCheckStatusPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /profile/telegram/generate_token(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const profileTelegramGenerateTokenPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /profile/telegram/toggle_notifications(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const profileTelegramToggleNotificationsPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /profile/telegram/unlink(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const profileTelegramUnlinkPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:id(.:format)
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const projectPath: ((
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/billing_cycles/:id(.:format)
 * @param {any} projectId
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const projectBillingCyclePath: ((
  projectId: RequiredRouteParameter,
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/billing_cycles(.:format)
 * @param {any} projectId
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const projectBillingCyclesPath: ((
  projectId: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/invitations/:id(.:format)
 * @param {any} projectId
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const projectInvitationPath: ((
  projectId: RequiredRouteParameter,
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/invitations(.:format)
 * @param {any} projectId
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const projectInvitationsPath: ((
  projectId: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/payment_confirmations/:id(.:format)
 * @param {any} projectId
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const projectPaymentConfirmationPath: ((
  projectId: RequiredRouteParameter,
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/payment_confirmations(.:format)
 * @param {any} projectId
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const projectPaymentConfirmationsPath: ((
  projectId: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/payments(.:format)
 * @param {any} projectId
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const projectPaymentsPath: ((
  projectId: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const projectsPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/active_storage/representations/redirect/:signed_blob_id/:variation_key/*filename(.:format)
 * @param {any} signedBlobId
 * @param {any} variationKey
 * @param {any} filename
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsBlobRepresentationPath: ((
  signedBlobId: RequiredRouteParameter,
  variationKey: RequiredRouteParameter,
  filename: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/active_storage/representations/proxy/:signed_blob_id/:variation_key/*filename(.:format)
 * @param {any} signedBlobId
 * @param {any} variationKey
 * @param {any} filename
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsBlobRepresentationProxyPath: ((
  signedBlobId: RequiredRouteParameter,
  variationKey: RequiredRouteParameter,
  filename: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/conductor/action_mailbox/inbound_emails/:id(.:format)
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsConductorInboundEmailPath: ((
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/conductor/action_mailbox/:inbound_email_id/incinerate(.:format)
 * @param {any} inboundEmailId
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsConductorInboundEmailIncineratePath: ((
  inboundEmailId: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/conductor/action_mailbox/:inbound_email_id/reroute(.:format)
 * @param {any} inboundEmailId
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsConductorInboundEmailReroutePath: ((
  inboundEmailId: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/conductor/action_mailbox/inbound_emails/sources(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsConductorInboundEmailSourcesPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/conductor/action_mailbox/inbound_emails(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsConductorInboundEmailsPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/active_storage/direct_uploads(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsDirectUploadsPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/active_storage/disk/:encoded_key/*filename(.:format)
 * @param {any} encodedKey
 * @param {any} filename
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsDiskServicePath: ((
  encodedKey: RequiredRouteParameter,
  filename: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /up(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsHealthCheckPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/info(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsInfoPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/info/notes(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsInfoNotesPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/info/properties(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsInfoPropertiesPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/info/routes(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsInfoRoutesPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/mailers(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsMailersPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/action_mailbox/mailgun/inbound_emails/mime(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsMailgunInboundEmailsPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/action_mailbox/mandrill/inbound_emails(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsMandrillInboundEmailsPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/action_mailbox/mandrill/inbound_emails(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsMandrillInboundHealthCheckPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/action_mailbox/postmark/inbound_emails(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsPostmarkInboundEmailsPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/action_mailbox/relay/inbound_emails(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsRelayInboundEmailsPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/action_mailbox/sendgrid/inbound_emails(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsSendgridInboundEmailsPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/active_storage/blobs/redirect/:signed_id/*filename(.:format)
 * @param {any} signedId
 * @param {any} filename
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsServiceBlobPath: ((
  signedId: RequiredRouteParameter,
  filename: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/active_storage/blobs/proxy/:signed_id/*filename(.:format)
 * @param {any} signedId
 * @param {any} filename
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const railsServiceBlobProxyPath: ((
  signedId: RequiredRouteParameter,
  filename: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:id/reminder_settings(.:format)
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const reminderSettingsProjectPath: ((
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /admin/billing_configuration/reset(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const resetAdminBillingConfigurationPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const rootPath: ((
  options?: RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /secure_files/download/:token(.:format)
 * @param {any} token
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const secureFileDownloadPath: ((
  token: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /secure_files/payment_evidence/:payment_id(.:format)
 * @param {any} paymentId
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const securePaymentEvidencePath: ((
  paymentId: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/invitations/:id/send_email(.:format)
 * @param {any} projectId
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const sendEmailProjectInvitationPath: ((
  projectId: RequiredRouteParameter,
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /signup(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const signupPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /telegram/webhook(.:format)
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const telegramWebhookPath: ((
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /projects/:project_id/billing_cycles/:id/unarchive(.:format)
 * @param {any} projectId
 * @param {any} id
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const unarchiveProjectBillingCyclePath: ((
  projectId: RequiredRouteParameter,
  id: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /unsubscribe/:token(.:format)
 * @param {any} token
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const unsubscribePath: ((
  token: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /rails/active_storage/disk/:encoded_token(.:format)
 * @param {any} encodedToken
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const updateRailsDiskServicePath: ((
  encodedToken: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

/**
 * Generates rails route to
 * /magic_link/:token(.:format)
 * @param {any} token
 * @param {object | undefined} options
 * @returns {string} route path
 */
export const verifyMagicLinkPath: ((
  token: RequiredRouteParameter,
  options?: {format?: OptionalRouteParameter} & RouteOptions
) => string) & RouteHelperExtras;

// By some reason this line prevents all types in a file
// from being automatically exported
export {};
